const { Bot, InlineKeyboard } = require('grammy');

const bot = new Bot('7198900652:AAGhb8FB5rXzq8Q78Lqp5mfojG5d9pEvEr0'); // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.catch((err) => {
    console.error('–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:', err);
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', (ctx) => {
    ctx.reply(`
üé≤ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É "–û—Ä–µ–ª –∏ —Ä–µ—à–∫–∞"!
üìú –ü—Ä–∞–≤–∏–ª–∞:
1. –ù–∞–∂–º–∏ /play —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å
2. –í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É: "–û—Ä–µ–ª" –∏–ª–∏ "–†–µ—à–∫–∞"
3. –ë–æ—Ç –ø–æ–¥–±—Ä–æ—Å–∏—Ç –º–æ–Ω–µ—Ç—É
4. –ï—Å–ª–∏ —É–≥–∞–¥–∞–ª - –ø–æ–±–µ–¥–∞! –ï—Å–ª–∏ –Ω–µ—Ç - –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑

üîÑ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏ /play
‚ùì –ü–æ–º–æ—â—å - /help
    `);
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.command('help', (ctx) => {
    ctx.reply(`
üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
/play - –ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç—É
/help - –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã

üéØ –ö–∞–∫ –∏–≥—Ä–∞—Ç—å?
1. –ù–∞–∂–º–∏ /play
2. –í—ã–±–µ—Ä–∏ "–û—Ä–µ–ª" –∏–ª–∏ "–†–µ—à–∫–∞"
3. –£–∑–Ω–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!
    `);
});

// –ö–æ–º–∞–Ω–¥–∞ /play
bot.command('play', async (ctx) => {
    try {
        const betKeyboard = new InlineKeyboard()
            .text('–û—Ä–µ–ª', 'heads')
            .text('–†–µ—à–∫–∞', 'tails');

        await ctx.reply('–í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É:', { reply_markup: betKeyboard });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ /play:', error);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–æ–∫
bot.on('callback_query:data', async (ctx) => {
    try {
        // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã Telegram –∑–Ω–∞–ª, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        await ctx.answerCallbackQuery();
        
        const userChoice = ctx.callbackQuery.data;
        
        // –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ "–ï—â–µ —Ä–∞–∑" –∏–ª–∏ "–í—ã–π—Ç–∏"
        if (userChoice === 'play_again') {
            const betKeyboard = new InlineKeyboard()
                .text('–û—Ä–µ–ª', 'heads')
                .text('–†–µ—à–∫–∞', 'tails');
            
            await ctx.editMessageText('–í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É:', { reply_markup: betKeyboard });
            return;
        }
        
        if (userChoice === 'exit') {
            await ctx.editMessageText('–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –ù–∞–∂–º–∏ /play –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞.');
            return;
        }
        
        // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–≥—Ä—ã
        const coinFlip = Math.random() < 0.5 ? 'heads' : 'tails';
        const result = userChoice === coinFlip ? 'üéâ –¢—ã –≤—ã–∏–≥—Ä–∞–ª!' : 'üò¢ –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!';
        
        const playAgainKeyboard = new InlineKeyboard()
            .text('–ï—â–µ —Ä–∞–∑', 'play_again')
            .text('–í—ã–π—Ç–∏', 'exit');
        
        await ctx.editMessageText(
            `ü™ô –†–µ–∑—É–ª—å—Ç–∞—Ç: ${coinFlip === 'heads' ? '–û—Ä–µ–ª' : '–†–µ—à–∫–∞'}\n${result}`,
            { reply_markup: playAgainKeyboard }
        );
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error);
        
        // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try {
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ /play');
        } catch (e) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', e);
        }
    }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.start();
console.log('ü™ô –ë–æ—Ç "–û—Ä–µ–ª –∏ —Ä–µ—à–∫–∞" –∑–∞–ø—É—â–µ–Ω!');